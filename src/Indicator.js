/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useLoader, useFrame } from "react-three-fiber";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";

import { useSprings, animated } from "react-spring/three";

const Dot = ({ exact, materials, nodes, position }) => (
  <animated.group position={position}>
    <mesh
      material={exact ? materials.On : materials.Any}
      geometry={nodes.Indicator_Exact.geometry}
    />
  </animated.group>
);

const start_positions = [
  [-0.5, 0.5, -0.5],
  [0.5, 0.5, -0.5],
  [-0.5, 0.5, 0.5],
  [0.5, 0.5, 0.5]
];

const positions = [
  [-0.5, 1, -0.5],
  [0.5, 1, -0.5],
  [-0.5, 1, 0.5],
  [0.5, 1, 0.5]
];

export default function Model(props) {
  const group = useRef();

  const { nodes, materials, animations } = useLoader(
    GLTFLoader,
    "/game_pieces.glb"
  );

  const springs = useSprings(
    positions.length,
    positions.map((item, i) => ({
      from: { position: start_positions[i] },
      to: { position: positions[i] }
    }))
  );
  const { clue } = props.pins;

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        material={materials.Hole}
        geometry={nodes.Indicator.geometry}
        name="Indicator"
      />
      {clue.split("").map((c, i) => (
        <Dot
          key={c + i.toString()}
          nodes={nodes}
          materials={materials}
          exact={c === "X"}
          position={springs[i].position}
        />
      ))}
    </group>
  );
}
